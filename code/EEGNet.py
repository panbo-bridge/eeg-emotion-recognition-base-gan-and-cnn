import  torch
import numpy as np
from torch import  nn
from torchsummary import summary
from torch.nn import functional as F

class EEGNet_v1(nn.Module):#单通道实验
    def __init__(self):
        super(EEGNet_v1,self).__init__()
        self.conv1 = nn.Conv2d(1,12,kernel_size=3,stride=1,padding=1)
        self.norm1 = nn.BatchNorm2d(12)
        self.conv2 = nn.Conv2d(12,32,kernel_size=3,stride=1,padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256,128,kernel_size=3,stride=1,padding=1)
        self.norm6 = nn.BatchNorm2d(128)
        self.conv7 = nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1)
        self.norm7 = nn.BatchNorm2d(32)
        self.fc1 = nn.Linear(32*9*9,512)
        self.fc2 = nn.Linear(512,128)
        self.fc3 = nn.Linear(128,2)

    def forward(self,input):
        x = input[:,1]
        # print(x.shape)
        x = x.reshape(-1,1,9,9)
        x = self.conv1(x)
        x = self.norm1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = self.norm2(x)
        x = F.relu(x)
        x = self.conv3(x)
        x = self.norm3(x)
        x = F.relu(x)
        x = self.conv4(x)
        x = self.norm4(x)
        x = F.relu(x)
        x= self.conv5(x)
        x = self.norm5(x)
        x = F.relu(x)
        x = self.conv6(x)
        x = self.norm6(x)
        x = F.relu(x)
        x = self.conv7(x)
        x = self.norm7(x)
        x = F.relu(x)
        x = x.view(x.size(0),-1)
        x = self.fc1(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        x = self.fc2(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        x = self.fc3(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        return x
class EEGNet_v2(nn.Module):#三通道实验
    def __init__(self):
        super(EEGNet_v2,self).__init__()
        self.conv1 = nn.Conv2d(3,12,kernel_size=3,stride=1,padding=1)
        self.norm1 = nn.BatchNorm2d(12)
        self.conv2 = nn.Conv2d(12,32,kernel_size=3,stride=1,padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256,128,kernel_size=3,stride=1,padding=1)
        self.norm6 = nn.BatchNorm2d(128)
        self.conv7 = nn.Conv2d(128,32*3,kernel_size=3,stride=1,padding=1)
        self.norm7 = nn.BatchNorm2d(32*3)
        self.fc1 = nn.Linear(32*3*9*9,512)
        self.fc2 = nn.Linear(512,128)
        self.fc3 = nn.Linear(128,2)

    def forward(self,input):
        x = input
        # print(x.shape)
        # x = x.reshape(-1,1,9,9)
        x = self.conv1(x)
        x = self.norm1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = self.norm2(x)
        x = F.relu(x)
        x = self.conv3(x)
        x = self.norm3(x)
        x = F.relu(x)
        x = self.conv4(x)
        x = self.norm4(x)
        x = F.relu(x)
        x= self.conv5(x)
        x = self.norm5(x)
        x = F.relu(x)
        x = self.conv6(x)
        x = self.norm6(x)
        x = F.relu(x)
        x = self.conv7(x)
        x = self.norm7(x)
        x = F.relu(x)
        x = x.view(x.size(0),-1)
        x = self.fc1(x)
        x = F.relu(x)
        # x = F.dropout(x,0.5)
        x = self.fc2(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        x = self.fc3(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        return x

class EEGNet_v3(nn.Module):#三个单通道实验
    def __init__(self):
        super(EEGNet_v3,self).__init__()
        self.conv1 = nn.Conv2d(1,12,kernel_size=3,stride=1,padding=1)
        self.norm1 = nn.BatchNorm2d(12)
        self.conv2 = nn.Conv2d(12,32,kernel_size=3,stride=1,padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256,128,kernel_size=3,stride=1,padding=1)
        self.norm6 = nn.BatchNorm2d(128)
        self.conv7 = nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1)
        self.norm7 = nn.BatchNorm2d(32)
        self.fc1 = nn.Linear(32*3*9*9,512)
        self.fc2 = nn.Linear(512,128)
        self.fc3 = nn.Linear(128,2)

    def forward(self,input):
        # x = input[:,-1]
        conv = []
        list = [0,1,-1]
        # print(x.shape)
        for i in list:
            x = input[:,i]
            x = x.reshape(-1,1,9,9)
            x = self.conv1(x)
            x = self.norm1(x)
            x = F.relu(x)
            x = self.conv2(x)
            x = self.norm2(x)
            x = F.relu(x)
            x = self.conv3(x)
            x = self.norm3(x)
            x = F.relu(x)
            x = self.conv4(x)
            x = self.norm4(x)
            x = F.relu(x)
            x= self.conv5(x)
            x = self.norm5(x)
            x = F.relu(x)
            x = self.conv6(x)
            x = self.norm6(x)
            x = F.relu(x)
            x = self.conv7(x)
            x = self.norm7(x)
            x = F.relu(x)
            x = x.view(x.size(0),-1)
            conv.append(x)
        merge = torch.cat(conv,dim=1)
        merge = self.fc1(merge)
        merge = F.relu(merge)
        merge = self.fc2(merge)
        merge = F.relu(merge)
        merge = self.fc3(merge)
        merge = F.relu(merge)
        return merge
class EEGNet_v4(nn.Module):#双通道实验
    def __init__(self):
        super(EEGNet_v4,self).__init__()
        self.conv1 = nn.Conv2d(2,12,kernel_size=3,stride=1,padding=1)
        self.norm1 = nn.BatchNorm2d(12)
        self.conv2 = nn.Conv2d(12,32,kernel_size=3,stride=1,padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256,128,kernel_size=3,stride=1,padding=1)
        self.norm6 = nn.BatchNorm2d(128)
        self.conv7 = nn.Conv2d(128,32*2,kernel_size=3,stride=1,padding=1)
        self.norm7 = nn.BatchNorm2d(32*2)
        self.fc1 = nn.Linear(32*2*9*9,512)
        self.fc2 = nn.Linear(512,128)
        self.fc3 = nn.Linear(128,2)

    def forward(self,input):
        x = input[:,1:]
        # print(x.shape)
        # x = x.reshape(-1,1,9,9)
        x = self.conv1(x)
        x = self.norm1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = self.norm2(x)
        x = F.relu(x)
        x = self.conv3(x)
        x = self.norm3(x)
        x = F.relu(x)
        x = self.conv4(x)
        x = self.norm4(x)
        x = F.relu(x)
        x= self.conv5(x)
        x = self.norm5(x)
        x = F.relu(x)
        x = self.conv6(x)
        x = self.norm6(x)
        x = F.relu(x)
        x = self.conv7(x)
        x = self.norm7(x)
        x = F.relu(x)
        x = x.view(x.size(0),-1)
        x = self.fc1(x)
        x = F.relu(x)
        # x = F.dropout(x,0.5)
        x = self.fc2(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        x = self.fc3(x)
        x = F.relu(x)
        # x = F.dropout(x,0.2)
        return x
class EEGNet_v5(nn.Module):#两个通道的实验
    def __init__(self):
        super(EEGNet_v5,self).__init__()
        self.conv1 = nn.Conv2d(1,12,kernel_size=3,stride=1,padding=1)
        self.norm1 = nn.BatchNorm2d(12)
        self.conv2 = nn.Conv2d(12,32,kernel_size=3,stride=1,padding=1)
        self.norm2 = nn.BatchNorm2d(32)
        self.conv3 = nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
        self.norm3 = nn.BatchNorm2d(64)
        self.conv4 = nn.Conv2d(64,128,kernel_size=3,stride=1,padding=1)
        self.norm4 = nn.BatchNorm2d(128)
        self.conv5 = nn.Conv2d(128,256,kernel_size=3,stride=1,padding=1)
        self.norm5 = nn.BatchNorm2d(256)
        self.conv6 = nn.Conv2d(256,128,kernel_size=3,stride=1,padding=1)
        self.norm6 = nn.BatchNorm2d(128)
        self.conv7 = nn.Conv2d(128,32,kernel_size=3,stride=1,padding=1)
        self.norm7 = nn.BatchNorm2d(32)
        self.fc1 = nn.Linear(32*2*9*9,512)
        self.fc2 = nn.Linear(512,128)
        self.fc3 = nn.Linear(128,2)

    def forward(self,input):
        # x = input[:,-1]
        conv = []
        list = [0,1]
        # print(x.shape)
        for i in list:
            x = input[:,i]
            x = x.reshape(-1,1,9,9)
            x = self.conv1(x)
            x = self.norm1(x)
            x = F.relu(x)
            x = self.conv2(x)
            x = self.norm2(x)
            x = F.relu(x)
            x = self.conv3(x)
            x = self.norm3(x)
            x = F.relu(x)
            x = self.conv4(x)
            x = self.norm4(x)
            x = F.relu(x)
            x= self.conv5(x)
            x = self.norm5(x)
            x = F.relu(x)
            x = self.conv6(x)
            x = self.norm6(x)
            x = F.relu(x)
            x = self.conv7(x)
            x = self.norm7(x)
            x = F.relu(x)
            x = x.view(x.size(0),-1)
            conv.append(x)
        merge = torch.cat(conv,dim=1)
        merge = self.fc1(merge)
        merge = F.relu(merge)
        merge = self.fc2(merge)
        merge = F.relu(merge)
        merge = self.fc3(merge)
        merge = F.relu(merge)
        return merge